@model IEnumerable<KMSI_Projects.Models.Company>
@{
    ViewData["Title"] = "Company Master";
    Layout = "_Layout";
}

<!-- Anti-forgery token untuk production -->
@Html.AntiForgeryToken()

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <div class="row align-items-center">
                        <div class="col">
                            <h3 class="card-title mb-0">
                                <i class="fas fa-building text-primary me-2"></i>
                                Company Master
                            </h3>
                        </div>
                        <div class="col-auto">
                            <button type="button" class="btn btn-primary" onclick="openCreateModal()">
                                <i class="fas fa-plus me-2"></i>Add New Company
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover" id="companyTable">
                            <thead class="table-dark">
                                <tr>
                                    <th>Code</th>
                                    <th>Company Name</th>
                                    <th>Parent Company</th>
                                    <th>City</th>
                                    <th>Phone</th>
                                    <th>Head Office</th>
                                    <th>Status</th>
                                    <th>Sites</th>
                                    <th width="150">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var company in Model)
                                {
                                    <tr data-company-id="@company.CompanyId">
                                        <td><strong>@company.CompanyCode</strong></td>
                                        <td>@company.CompanyName</td>
                                        <td>@(company.ParentCompany?.CompanyName ?? "-")</td>
                                        <td>@(company.City ?? "-")</td>
                                        <td>@(company.Phone ?? "-")</td>
                                        <td>
                                            @if (company.IsHeadOffice)
                                            {
                                                <span class="badge bg-primary">Head Office</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">Branch</span>
                                            }
                                        </td>
                                        <td>
                                            @if (company.IsActive)
                                            {
                                                <span class="badge bg-success">Active</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">Inactive</span>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge bg-info">@(company.Sites?.Count(s => s.IsActive) ?? 0)</span>
                                        </td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <button type="button" class="btn btn-sm btn-outline-info" onclick="viewDetails(@company.CompanyId)" data-bs-toggle="tooltip" title="View Details">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-warning" onclick="openEditModal(@company.CompanyId)" data-bs-toggle="tooltip" title="Edit">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                @if (!company.Sites.Any(s => s.IsActive))
                                                {
                                                    <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteCompany(@company.CompanyId)" data-bs-toggle="tooltip" title="Delete">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Company Modal -->
<div class="modal fade" id="companyModal" tabindex="-1" aria-labelledby="companyModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="companyModalLabel">Add New Company</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="companyForm">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <input type="hidden" id="companyId" value="0" />

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="companyCode" class="form-label">Company Code <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="companyCode" name="CompanyCode" required maxlength="3" style="text-transform: uppercase;">
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="parentCompanyId" class="form-label">Parent Company</label>
                            <select class="form-select" id="parentCompanyId" name="ParentCompanyId">
                                <option value="">Select Parent Company (Optional)</option>
                            </select>
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="companyName" class="form-label">Company Name <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="companyName" name="CompanyName" required maxlength="100">
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="mb-3">
                        <label for="address" class="form-label">Address</label>
                        <textarea class="form-control" id="address" name="Address" rows="3" maxlength="500"></textarea>
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="city" class="form-label">City</label>
                            <input type="text" class="form-control" id="city" name="City" maxlength="50">
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="province" class="form-label">Province</label>
                            <input type="text" class="form-control" id="province" name="Province" maxlength="50">
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="phone" class="form-label">Phone</label>
                            <input type="text" class="form-control" id="phone" name="Phone" maxlength="20">
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" name="Email" maxlength="100">
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="isHeadOffice" name="IsHeadOffice">
                                <label class="form-check-label" for="isHeadOffice">
                                    Is Head Office
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="isActive" name="IsActive" checked>
                                <label class="form-check-label" for="isActive">
                                    Is Active
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="saveButton">
                        <i class="fas fa-save me-2"></i>Save Company
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Details Modal -->
<div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detailsModalLabel">Company Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="detailsContent">
                <!-- Details content will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // ===================================================================
        // PRODUCTION-READY JAVASCRIPT untuk KMSI Company Module
        // ===================================================================

        // Global configuration dan utility functions
        window.KMSI = window.KMSI || {};

        // Base URL configuration - otomatis detect environment
        KMSI.Config = {
            // Otomatis detect base URL dari current location
            getBaseUrl: function() {
                const protocol = window.location.protocol;
                const host = window.location.host;
                const pathArray = window.location.pathname.split('/');

                // Jika ada virtual directory (IIS deployment)
                let basePath = '';
                if (pathArray.length > 1 && pathArray[1] !== '') {
                    // Check if first path segment is likely a virtual directory
                    const firstSegment = pathArray[1].toLowerCase();
                    if (!['company', 'site', 'teacher', 'student', 'home'].includes(firstSegment)) {
                        basePath = '/' + pathArray[1];
                    }
                }

                return protocol + '//' + host + basePath;
            },

            // Build complete URL for API calls
            buildUrl: function(relativePath) {
                const baseUrl = this.getBaseUrl();
                // Ensure relativePath starts with /
                if (!relativePath.startsWith('/')) {
                    relativePath = '/' + relativePath;
                }
                return baseUrl + relativePath;
            },

            // Get anti-forgery token
            getAntiForgeryToken: function() {
                return $('input[name="__RequestVerificationToken"]').val() ||
                       $('meta[name="__RequestVerificationToken"]').attr('content') ||
                       '';
            }
        };

        // Company Module dengan production-ready AJAX calls
        KMSI.Company = {
            // Initialize module
            init: function() {
                this.isEditMode = false;
                this.companyTable = null;
                this.bindEvents();
                this.initializeDataTable();
            },

            // Bind event handlers
            bindEvents: function() {
                const self = this;

                // Company code to uppercase
                $(document).on('input', '#companyCode', function() {
                    this.value = this.value.toUpperCase();
                });

                // Form submission
                $(document).on('submit', '#companyForm', function(e) {
                    e.preventDefault();
                    self.submitForm();
                });

                // Modal events
                $('#companyModal').on('hidden.bs.modal', function() {
                    self.resetForm();
                });
            },

            // Initialize DataTable
            initializeDataTable: function() {
                try {
                    if ($.fn.DataTable && $('#companyTable').length) {
                        this.companyTable = KMSI.initDataTable('#companyTable', {
                            order: [[1, 'asc']], // Sort by company name
                            columnDefs: [
                                { targets: [8], orderable: false } // Actions column not sortable
                            ]
                        });
                        console.log('Company DataTable initialized successfully');
                    }
                } catch (error) {
                    console.error('Error initializing DataTable:', error);
                    KMSI.showToast('Error initializing table. Some features may not work properly.', 'warning');
                }
            },

            // Open create modal
            openCreateModal: function() {
                try {
                    this.isEditMode = false;
                    this.resetForm();
                    $('#companyModalLabel').text('Add New Company');
                    $('#saveButton').html('<i class="fas fa-save me-2"></i>Save Company');

                    this.loadParentCompanies();
                    $('#companyModal').modal('show');
                } catch (error) {
                    console.error('Error opening create modal:', error);
                    KMSI.showToast('Error opening form. Please try again.', 'error');
                }
            },

            // Open edit modal
            openEditModal: function(companyId) {
                try {
                    if (!companyId) {
                        KMSI.showToast('Invalid company ID', 'error');
                        return;
                    }

                    this.isEditMode = true;
                    this.resetForm();
                    $('#companyModalLabel').text('Edit Company');
                    $('#saveButton').html('<i class="fas fa-save me-2"></i>Update Company');

                    // Load company data dengan production-ready URL
                    const url = KMSI.Config.buildUrl('/Company/GetEditForm/' + companyId);

                    $.ajax({
                        url: url,
                        method: 'GET',
                        timeout: 30000, // 30 second timeout
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .done(function(response) {
                        if (response && response.success) {
                            const company = response.data;
                            KMSI.Company.populateForm(company);
                            KMSI.Company.loadParentCompanies(response.parentCompanies, company.parentCompanyId);
                            $('#companyModal').modal('show');
                        } else {
                            KMSI.showToast(response?.message || 'Failed to load company data', 'error');
                        }
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Failed to load company data:', {xhr, status, error});
                        let message = 'Failed to load company data. ';

                        if (status === 'timeout') {
                            message += 'Request timed out.';
                        } else if (xhr.status === 404) {
                            message += 'Company not found.';
                        } else if (xhr.status >= 500) {
                            message += 'Server error occurred.';
                        } else {
                            message += 'Please check your connection and try again.';
                        }

                        KMSI.showToast(message, 'error');
                    });
                } catch (error) {
                    console.error('Error opening edit modal:', error);
                    KMSI.showToast('Error opening edit form. Please try again.', 'error');
                }
            },

            // Populate form with company data
            populateForm: function(company) {
                $('#companyId').val(company.companyId);
                $('#companyCode').val(company.companyCode);
                $('#companyName').val(company.companyName);
                $('#address').val(company.address || '');
                $('#city').val(company.city || '');
                $('#province').val(company.province || '');
                $('#phone').val(company.phone || '');
                $('#email').val(company.email || '');
                $('#isHeadOffice').prop('checked', company.isHeadOffice);
                $('#isActive').prop('checked', company.isActive);
            },

            // Submit form
            submitForm: function() {
                try {
                    const formData = {
                        CompanyId: parseInt($('#companyId').val()) || 0,
                        ParentCompanyId: $('#parentCompanyId').val() ? parseInt($('#parentCompanyId').val()) : null,
                        CompanyCode: $('#companyCode').val(),
                        CompanyName: $('#companyName').val(),
                        Address: $('#address').val(),
                        City: $('#city').val(),
                        Province: $('#province').val(),
                        Phone: $('#phone').val(),
                        Email: $('#email').val(),
                        IsHeadOffice: $('#isHeadOffice').is(':checked'),
                        IsActive: $('#isActive').is(':checked')
                    };

                    // Build production-ready URL
                    const url = this.isEditMode ?
                        KMSI.Config.buildUrl('/Company/Edit/' + formData.CompanyId) :
                        KMSI.Config.buildUrl('/Company/Create');

                    // Clear previous validation errors
                    $('.is-invalid').removeClass('is-invalid');
                    $('.invalid-feedback').text('');

                    // Show loading state
                    const saveButton = $('#saveButton');
                    const originalText = saveButton.html();
                    saveButton.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Saving...');

                    $.ajax({
                        url: url,
                        method: 'POST',
                        data: JSON.stringify(formData),
                        contentType: 'application/json; charset=utf-8',
                        dataType: 'json',
                        timeout: 60000, // 60 second timeout for save operations
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                            'RequestVerificationToken': KMSI.Config.getAntiForgeryToken()
                        }
                    })
                    .done(function(response) {
                        if (response && response.success) {
                            $('#companyModal').modal('hide');
                            KMSI.showToast(response.message || 'Company saved successfully', 'success');

                            // Reload page after short delay
                            setTimeout(function() {
                                window.location.reload();
                            }, 1500);
                        } else {
                            KMSI.Company.handleValidationErrors(response);
                        }
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Save failed:', {xhr, status, error});

                        if (xhr.status === 400 && xhr.responseJSON && xhr.responseJSON.errors) {
                            KMSI.Company.handleValidationErrors(xhr.responseJSON);
                        } else {
                            let message = 'An error occurred while saving the company. ';

                            if (status === 'timeout') {
                                message += 'Request timed out. Please try again.';
                            } else if (xhr.status === 401) {
                                message = 'Your session has expired. Please login again.';
                                setTimeout(() => window.location.href = '/Login', 2000);
                            } else if (xhr.status === 403) {
                                message = 'You do not have permission to perform this action.';
                            } else if (xhr.status >= 500) {
                                message += 'Server error occurred. Please try again later.';
                            } else {
                                message += 'Please check your connection and try again.';
                            }

                            KMSI.showToast(message, 'error');
                        }
                    })
                    .always(function() {
                        // Restore button state
                        saveButton.prop('disabled', false).html(originalText);
                    });
                } catch (error) {
                    console.error('Error submitting form:', error);
                    KMSI.showToast('Error submitting form. Please try again.', 'error');
                }
            },

            // Handle validation errors
            handleValidationErrors: function(response) {
                if (response && response.errors) {
                    if (Array.isArray(response.errors)) {
                        response.errors.forEach(function(error) {
                            KMSI.showToast(error, 'error');
                        });
                    } else {
                        Object.keys(response.errors).forEach(function(field) {
                            const input = $(`[name="${field}"]`);
                            input.addClass('is-invalid');
                            input.siblings('.invalid-feedback').text(response.errors[field][0]);
                        });
                    }
                } else {
                    KMSI.showToast(response?.message || 'Validation failed', 'error');
                }
            },

            // Load parent companies
            loadParentCompanies: function(parentCompanies = null, selectedId = null) {
                if (parentCompanies) {
                    this.populateParentCompanies(parentCompanies, selectedId);
                } else {
                    const url = KMSI.Config.buildUrl('/Company/GetCreateForm');

                    $.ajax({
                        url: url,
                        method: 'GET',
                        timeout: 30000,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .done(function(response) {
                        if (response && response.success) {
                            KMSI.Company.populateParentCompanies(response.parentCompanies, selectedId);
                        }
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Failed to load parent companies:', {xhr, status, error});
                        // Don't show error to user for this non-critical operation
                    });
                }
            },

            // Populate parent companies dropdown
            populateParentCompanies: function(companies, selectedId = null) {
                const select = $('#parentCompanyId');
                select.empty();
                select.append('<option value="">Select Parent Company (Optional)</option>');

                if (companies && Array.isArray(companies)) {
                    companies.forEach(function(company) {
                        const option = $('<option></option>')
                            .attr('value', company.companyId)
                            .text(company.companyName);

                        if (selectedId && company.companyId == selectedId) {
                            option.attr('selected', 'selected');
                        }

                        select.append(option);
                    });
                }
            },

            // View company details
            viewDetails: function(companyId) {
                try {
                    if (!companyId) {
                        KMSI.showToast('Invalid company ID', 'error');
                        return;
                    }

                    const url = KMSI.Config.buildUrl('/Company/Details/' + companyId);

                    $.ajax({
                        url: url,
                        method: 'GET',
                        timeout: 30000,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .done(function(response) {
                        if (response && response.success) {
                            const company = response.data;
                            KMSI.Company.displayCompanyDetails(company);
                            $('#detailsModal').modal('show');
                        } else {
                            KMSI.showToast(response?.message || 'Failed to load company details', 'error');
                        }
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Failed to load company details:', {xhr, status, error});
                        KMSI.showToast('Failed to load company details. Please try again.', 'error');
                    });
                } catch (error) {
                    console.error('Error viewing details:', error);
                    KMSI.showToast('Error loading details. Please try again.', 'error');
                }
            },

            // Display company details in modal
            displayCompanyDetails: function(company) {
                const detailsHtml = `
                    <div class="row">
                        <div class="col-md-6">
                            <table class="table table-borderless">
                                <tr>
                                    <td><strong>Company Code:</strong></td>
                                    <td>${company.companyCode || '-'}</td>
                                </tr>
                                <tr>
                                    <td><strong>Company Name:</strong></td>
                                    <td>${company.companyName || '-'}</td>
                                </tr>
                                <tr>
                                    <td><strong>Parent Company:</strong></td>
                                    <td>${company.parentCompanyName || '-'}</td>
                                </tr>
                                <tr>
                                    <td><strong>Address:</strong></td>
                                    <td>${company.address || '-'}</td>
                                </tr>
                                <tr>
                                    <td><strong>City:</strong></td>
                                    <td>${company.city || '-'}</td>
                                </tr>
                                <tr>
                                    <td><strong>Province:</strong></td>
                                    <td>${company.province || '-'}</td>
                                </tr>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <table class="table table-borderless">
                                <tr>
                                    <td><strong>Phone:</strong></td>
                                    <td>${company.phone || '-'}</td>
                                </tr>
                                <tr>
                                    <td><strong>Email:</strong></td>
                                    <td>${company.email || '-'}</td>
                                </tr>
                                <tr>
                                    <td><strong>Type:</strong></td>
                                    <td>${company.isHeadOffice ? 'Head Office' : 'Branch'}</td>
                                </tr>
                                <tr>
                                    <td><strong>Status:</strong></td>
                                    <td><span class="badge bg-${company.isActive ? 'success' : 'danger'}">${company.isActive ? 'Active' : 'Inactive'}</span></td>
                                </tr>
                                <tr>
                                    <td><strong>Active Sites:</strong></td>
                                    <td>${company.activeSitesCount || 0}</td>
                                </tr>
                                <tr>
                                    <td><strong>Created Date:</strong></td>
                                    <td>${company.createdDate ? KMSI.formatDate(company.createdDate) : '-'}</td>
                                </tr>
                            </table>
                        </div>
                    </div>
                `;

                $('#detailsContent').html(detailsHtml);
            },

            // Delete company
            deleteCompany: function(companyId) {
                try {
                    if (!companyId) {
                        KMSI.showToast('Invalid company ID', 'error');
                        return;
                    }

                    // Use SweetAlert for confirmation
                    KMSI.showConfirm(
                        'Delete Company',
                        'Are you sure you want to delete this company? This action cannot be undone.',
                        'Yes, Delete',
                        'Cancel'
                    ).then((result) => {
                        if (result.isConfirmed) {
                            const url = KMSI.Config.buildUrl('/Company/Delete/' + companyId);

                            $.ajax({
                                url: url,
                                method: 'POST',
                                timeout: 60000,
                                headers: {
                                    'X-Requested-With': 'XMLHttpRequest',
                                    'RequestVerificationToken': KMSI.Config.getAntiForgeryToken()
                                }
                            })
                            .done(function(response) {
                                if (response && response.success) {
                                    KMSI.showToast(response.message || 'Company deleted successfully', 'success');
                                    setTimeout(function() {
                                        window.location.reload();
                                    }, 1500);
                                } else {
                                    KMSI.showToast(response?.message || 'Failed to delete company', 'error');
                                }
                            })
                            .fail(function(xhr, status, error) {
                                console.error('Delete failed:', {xhr, status, error});
                                KMSI.showToast('An error occurred while deleting the company. Please try again.', 'error');
                            });
                        }
                    });
                } catch (error) {
                    console.error('Error deleting company:', error);
                    KMSI.showToast('Error deleting company. Please try again.', 'error');
                }
            },

            // Reset form
            resetForm: function() {
                try {
                    $('#companyForm')[0].reset();
                    $('#companyId').val('0');
                    $('.is-invalid').removeClass('is-invalid');
                    $('.invalid-feedback').text('');
                    $('#isActive').prop('checked', true);
                } catch (error) {
                    console.error('Error resetting form:', error);
                }
            }
        };

        // Global functions untuk backward compatibility
        function openCreateModal() {
            KMSI.Company.openCreateModal();
        }

        function openEditModal(companyId) {
            KMSI.Company.openEditModal(companyId);
        }

        function viewDetails(companyId) {
            KMSI.Company.viewDetails(companyId);
        }

        function deleteCompany(companyId) {
            KMSI.Company.deleteCompany(companyId);
        }

        // Initialize ketika document ready
        $(document).ready(function() {
            try {
                KMSI.Company.init();
                console.log('KMSI Company module initialized - Environment:', KMSI.Config.getBaseUrl());
            } catch (error) {
                console.error('Error initializing KMSI Company module:', error);
                KMSI.showToast('Error initializing page. Please refresh and try again.', 'error');
            }
        });

        // Development/Debug helpers (remove in production)
        if (window.location.hostname === 'localhost') {
            window.KMSI_DEBUG = {
                config: KMSI.Config,
                company: KMSI.Company,
                testUrl: function(path) {
                    console.log('Test URL:', KMSI.Config.buildUrl(path));
                }
            };
        }
    </script>
}