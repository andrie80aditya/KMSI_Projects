@model IEnumerable<KMSI_Projects.Models.Teacher>

@{
    ViewData["Title"] = "Master Teacher";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Anti-forgery token untuk production -->
@Html.AntiForgeryToken()

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <div class="row align-items-center">
                        <div class="col">
                            <h3 class="card-title mb-0">
                                <i class="fas fa-chalkboard-teacher me-2"></i>Teacher Management
                            </h3>
                        </div>
                        <div class="col-auto">
                            <button type="button" class="btn btn-primary" onclick="openCreateModal()">
                                <i class="fas fa-plus me-2"></i>Add New Teacher
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover" id="teacherTable">
                            <thead class="table-dark">
                                <tr>
                                    <th width="12%">Teacher Code</th>
                                    <th width="18%">Teacher Name</th>
                                    <th width="15%">Company</th>
                                    <th width="12%">Site</th>
                                    <th width="15%">Specialization</th>
                                    <th width="8%">Experience</th>
                                    <th width="8%">Trial</th>
                                    <th width="8%">Status</th>
                                    <th width="4%">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model)
                                {
                                    <tr>
                                        <td>
                                            <strong>@Html.DisplayFor(modelItem => item.TeacherCode)</strong>
                                        </td>
                                        <td>@Html.DisplayFor(modelItem => item.User.FullName)</td>
                                        <td>@Html.DisplayFor(modelItem => item.Company.CompanyName)</td>
                                        <td>@Html.DisplayFor(modelItem => item.Site.SiteName)</td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(item.Specialization))
                                            {
                                                <span class="badge bg-info">@item.Specialization</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Not specified</span>
                                            }
                                        </td>
                                        <td>
                                            @if (item.ExperienceYears.HasValue)
                                            {
                                                <span class="text-muted">@item.ExperienceYears years</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                        <td>
                                            @if (item.IsAvailableForTrial)
                                            {
                                                <span class="badge bg-success">Available</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">Not Available</span>
                                            }
                                        </td>
                                        <td>
                                            @if (item.IsActive)
                                            {
                                                <span class="badge bg-success">Active</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">Inactive</span>
                                            }
                                        </td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <button type="button" class="btn btn-outline-info btn-sm"
                                                        onclick="viewDetails(@item.TeacherId)" title="View Details">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                <button type="button" class="btn btn-outline-primary btn-sm"
                                                        onclick="openEditModal(@item.TeacherId)" title="Edit Teacher">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                @if (item.IsActive)
                                                {
                                                    <button type="button" class="btn btn-outline-danger btn-sm"
                                                            onclick="deleteTeacher(@item.TeacherId)" title="Delete Teacher">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Modal -->
<div class="modal fade" id="teacherModal" tabindex="-1" aria-labelledby="teacherModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="teacherModalLabel">Add New Teacher</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="teacherForm">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <input type="hidden" id="teacherId" value="0" />

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="userId" class="form-label">User <span class="text-danger">*</span></label>
                            <select class="form-select" id="userId" name="UserId" required>
                                <option value="">Select User</option>
                            </select>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="teacherCode" class="form-label">Teacher Code <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="teacherCode" name="TeacherCode"
                                   placeholder="e.g., TCH-001" maxlength="20" required style="text-transform: uppercase">
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="companyId" class="form-label">Company <span class="text-danger">*</span></label>
                            <select class="form-select" id="companyId" name="CompanyId" required onchange="loadSitesByCompany(this.value)">
                                <option value="">Select Company</option>
                            </select>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="siteId" class="form-label">Site <span class="text-danger">*</span></label>
                            <select class="form-select" id="siteId" name="SiteId" required>
                                <option value="">Select Site</option>
                            </select>
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="specialization" class="form-label">Specialization</label>
                            <input type="text" class="form-control" id="specialization" name="Specialization"
                                   placeholder="e.g., Piano, Guitar, Voice" maxlength="100">
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="experienceYears" class="form-label">Experience (Years)</label>
                            <input type="number" class="form-control" id="experienceYears" name="ExperienceYears"
                                   min="0" max="50" placeholder="Years of teaching experience">
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="hourlyRate" class="form-label">Hourly Rate</label>
                            <div class="input-group">
                                <span class="input-group-text">Rp</span>
                                <input type="number" class="form-control" id="hourlyRate" name="HourlyRate"
                                       min="0" step="0.01" placeholder="0.00">
                            </div>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="maxStudentsPerDay" class="form-label">Max Students Per Day <span class="text-danger">*</span></label>
                            <input type="number" class="form-control" id="maxStudentsPerDay" name="MaxStudentsPerDay"
                                   min="1" max="20" value="8" required>
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="isAvailableForTrial" name="IsAvailableForTrial" checked>
                                <label class="form-check-label" for="isAvailableForTrial">
                                    Available for Trial Classes
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="isActive" name="IsActive" checked>
                                <label class="form-check-label" for="isActive">
                                    Active Status
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="saveButton">
                        <i class="fas fa-save me-2"></i>Save Teacher
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Details Modal -->
<div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detailsModalLabel">Teacher Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="detailsContent">
                <!-- Details content will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // ===================================================================
        // PRODUCTION-READY JAVASCRIPT untuk KMSI Teacher Module
        // ===================================================================

        // Extend existing KMSI object (sudah didefinisikan di _Layout.cshtml)
        KMSI.Config = KMSI.Config || {
            // Otomatis detect base URL dari current location
            getBaseUrl: function() {
                const protocol = window.location.protocol;
                const host = window.location.host;
                const pathArray = window.location.pathname.split('/');

                // Jika ada virtual directory (IIS deployment)
                let basePath = '';
                if (pathArray.length > 1 && pathArray[1] !== '') {
                    // Check if first path segment is likely a virtual directory
                    const firstSegment = pathArray[1].toLowerCase();
                    if (!['teacher', 'company', 'site', 'student', 'home'].includes(firstSegment)) {
                        basePath = '/' + pathArray[1];
                    }
                }

                return protocol + '//' + host + basePath;
            },

            // Build complete URL for API calls
            buildUrl: function(relativePath) {
                const baseUrl = this.getBaseUrl();
                // Ensure relativePath starts with /
                if (!relativePath.startsWith('/')) {
                    relativePath = '/' + relativePath;
                }
                return baseUrl + relativePath;
            },

            // Get anti-forgery token
            getAntiForgeryToken: function() {
                return $('input[name="__RequestVerificationToken"]').val() ||
                       $('meta[name="__RequestVerificationToken"]').attr('content') ||
                       '';
            }
        };

        // Teacher Module dengan production-ready AJAX calls (mengikuti pola Site)
        KMSI.Teacher = {
            // Initialize module
            init: function() {
                this.isEditMode = false;
                this.teacherTable = null;
                this.bindEvents();
                this.initializeDataTable();
            },

            // Bind event handlers
            bindEvents: function() {
                const self = this;

                // Teacher code to uppercase
                $(document).on('input', '#teacherCode', function() {
                    this.value = this.value.toUpperCase();
                });

                // Form submission
                $(document).on('submit', '#teacherForm', function(e) {
                    e.preventDefault();
                    self.submitForm();
                });

                // Modal events
                $('#teacherModal').on('hidden.bs.modal', function() {
                    self.resetForm();
                });

                // Auto-generate teacher code based on user selection
                $(document).on('change', '#userId', function() {
                    if (!$('#teacherCode').val()) {
                        self.generateTeacherCode();
                    }
                });
            },

            // Initialize DataTable
            initializeDataTable: function() {
                try {
                    if ($.fn.DataTable && $('#teacherTable').length) {
                        this.teacherTable = KMSI.initDataTable('#teacherTable', {
                            order: [[1, 'asc']], // Sort by teacher name
                            columnDefs: [
                                { targets: [8], orderable: false } // Actions column not sortable
                            ]
                        });
                        console.log('Teacher DataTable initialized successfully');
                    }
                } catch (error) {
                    console.error('Error initializing DataTable:', error);
                    KMSI.showToast('Error initializing table. Some features may not work properly.', 'error');
                }
            },

            // Generate teacher code
            generateTeacherCode: function() {
                var userSelect = $('#userId');
                var selectedOption = userSelect.find('option:selected');
                if (selectedOption.val()) {
                    var userName = selectedOption.text().split('(')[0].trim();
                    var initials = userName.split(' ').map(function(word) {
                        return word.charAt(0);
                    }).join('').toUpperCase();

                    var code = 'TCH-' + initials + '-' + String(Math.floor(Math.random() * 100)).padStart(2, '0');
                    $('#teacherCode').val(code);
                }
            },

            // Reset form
            resetForm: function() {
                $('#teacherForm')[0].reset();
                $('#teacherId').val(0);
                $('.invalid-feedback').hide();
                $('.form-control').removeClass('is-invalid');
                $('.form-select').removeClass('is-invalid');
                // Clear dropdowns
                $('#userId').empty().append('<option value="">Select User</option>');
                $('#companyId').empty().append('<option value="">Select Company</option>');
                $('#siteId').empty().append('<option value="">Select Site</option>');
            },

            // Submit form (mengikuti pola Site yang tepat)
            submitForm: function() {
                try {
                    if (!this.validateForm()) {
                        return;
                    }

                    const formData = {
                        TeacherId: parseInt($('#teacherId').val()) || 0,
                        UserId: parseInt($('#userId').val()),
                        CompanyId: parseInt($('#companyId').val()),
                        SiteId: parseInt($('#siteId').val()),
                        TeacherCode: $('#teacherCode').val(),
                        Specialization: $('#specialization').val(),
                        ExperienceYears: $('#experienceYears').val() ? parseInt($('#experienceYears').val()) : null,
                        HourlyRate: $('#hourlyRate').val() ? parseFloat($('#hourlyRate').val()) : null,
                        MaxStudentsPerDay: parseInt($('#maxStudentsPerDay').val()),
                        IsAvailableForTrial: $('#isAvailableForTrial').is(':checked'),
                        IsActive: $('#isActive').is(':checked')
                    };

                    // Build production-ready URL
                    const url = this.isEditMode ?
                        KMSI.Config.buildUrl('/Teacher/Edit/' + formData.TeacherId) :
                        KMSI.Config.buildUrl('/Teacher/Create');

                    const self = this;

                    // Production-ready AJAX call dengan comprehensive error handling
                    $.ajax({
                        url: url,
                        type: 'POST',
                        data: JSON.stringify(formData),
                        contentType: 'application/json; charset=utf-8',
                        headers: {
                            'RequestVerificationToken': KMSI.Config.getAntiForgeryToken()
                        },
                        timeout: 30000, // 30 seconds
                        beforeSend: function() {
                            $('#saveButton').prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Saving...');
                        },
                        success: function(response) {
                            if (response && response.success) {
                                KMSI.showToast(response.message || 'Teacher saved successfully!', 'success');
                                $('#teacherModal').modal('hide');

                                // Refresh page instead of partial update untuk consistency
                                setTimeout(function() {
                                    window.location.reload();
                                }, 1000);
                            } else {
                                KMSI.showToast(response?.message || 'Failed to save teacher', 'error');
                                if (response?.errors) {
                                    console.error('Validation errors:', response.errors);
                                }
                            }
                        },
                        error: function(xhr, status, error) {
                            let message = 'An error occurred while saving the teacher. ';

                            if (status === 'timeout') {
                                message += 'Request timed out.';
                            } else if (xhr.status === 400) {
                                message += 'Invalid data provided.';
                            } else if (xhr.status === 401 || xhr.status === 403) {
                                message += 'You are not authorized to perform this action.';
                            } else if (xhr.status >= 500) {
                                message += 'Server error occurred.';
                            } else {
                                message += 'Please check your connection and try again.';
                            }

                            KMSI.showToast(message, 'error');
                            console.error('Teacher save error:', xhr, status, error);
                        },
                        complete: function() {
                            $('#saveButton').prop('disabled', false).html('<i class="fas fa-save me-2"></i>Save Teacher');
                        }
                    });

                } catch (error) {
                    console.error('Error in submitForm:', error);
                    KMSI.showToast('An unexpected error occurred. Please try again.', 'error');
                }
            },

            // Validate form
            validateForm: function() {
                var isValid = true;

                // Clear previous validation
                $('.form-control, .form-select').removeClass('is-invalid');
                $('.invalid-feedback').hide();

                // Required field validation
                var requiredFields = ['userId', 'companyId', 'siteId', 'teacherCode', 'maxStudentsPerDay'];

                requiredFields.forEach(function(field) {
                    var element = $('#' + field);
                    if (!element.val()) {
                        element.addClass('is-invalid');
                        element.siblings('.invalid-feedback').text('This field is required').show();
                        isValid = false;
                    }
                });

                // Teacher code validation
                var teacherCode = $('#teacherCode').val();
                if (teacherCode && !/^[A-Z0-9-]+$/.test(teacherCode)) {
                    $('#teacherCode').addClass('is-invalid');
                    $('#teacherCode').siblings('.invalid-feedback').text('Teacher code must contain only uppercase letters, numbers, and hyphens').show();
                    isValid = false;
                }

                return isValid;
            }
        };

        // Global functions untuk onclick handlers (mengikuti pola Site)
        function openCreateModal() {
            try {
                KMSI.Teacher.isEditMode = false;
                $('#teacherModalLabel').text('Add New Teacher');
                KMSI.Teacher.resetForm();
                loadCreateFormData();
            } catch (error) {
                console.error('Error opening create modal:', error);
                KMSI.showToast('Error opening form. Please try again.', 'error');
            }
        }

        function openEditModal(id) {
            try {
                KMSI.Teacher.isEditMode = true;
                $('#teacherModalLabel').text('Edit Teacher');
                KMSI.Teacher.resetForm();
                loadEditFormData(id);
            } catch (error) {
                console.error('Error opening edit modal:', error);
                KMSI.showToast('Error opening edit form. Please try again.', 'error');
            }
        }

        function loadCreateFormData() {
            $.get(KMSI.Config.buildUrl('/Teacher/GetCreateForm'))
                .done(function(response) {
                    if (response.success) {
                        // Populate users dropdown
                        $.each(response.users, function(index, user) {
                            $('#userId').append($('<option></option>').val(user.userId).text(user.fullName + ' (' + user.email + ')'));
                        });

                        // Populate companies dropdown
                        $.each(response.companies, function(index, company) {
                            $('#companyId').append($('<option></option>').val(company.companyId).text(company.companyName));
                        });

                        $('#teacherModal').modal('show');
                    } else {
                        KMSI.showToast(response.message || 'Failed to load form data', 'error');
                    }
                })
                .fail(function(xhr) {
                    KMSI.showToast('Failed to load form data', 'error');
                });
        }

        function loadEditFormData(id) {
            $.get(KMSI.Config.buildUrl('/Teacher/GetEditForm/' + id))
                .done(function(response) {
                    if (response.success) {
                        // Populate dropdowns
                        $.each(response.users, function(index, user) {
                            $('#userId').append($('<option></option>').val(user.userId).text(user.fullName + ' (' + user.email + ')'));
                        });

                        $.each(response.companies, function(index, company) {
                            $('#companyId').append($('<option></option>').val(company.companyId).text(company.companyName));
                        });

                        $.each(response.sites, function(index, site) {
                            $('#siteId').append($('<option></option>').val(site.siteId).text(site.siteName));
                        });

                        // Fill form with teacher data
                        var teacher = response.teacher;
                        $('#teacherId').val(teacher.teacherId);
                        $('#userId').val(teacher.userId);
                        $('#companyId').val(teacher.companyId);
                        $('#siteId').val(teacher.siteId);
                        $('#teacherCode').val(teacher.teacherCode);
                        $('#specialization').val(teacher.specialization);
                        $('#experienceYears').val(teacher.experienceYears);
                        $('#hourlyRate').val(teacher.hourlyRate);
                        $('#maxStudentsPerDay').val(teacher.maxStudentsPerDay);
                        $('#isAvailableForTrial').prop('checked', teacher.isAvailableForTrial);
                        $('#isActive').prop('checked', teacher.isActive);

                        $('#teacherModal').modal('show');
                    } else {
                        KMSI.showToast(response.message || 'Failed to load teacher data', 'error');
                    }
                })
                .fail(function() {
                    KMSI.showToast('Failed to load teacher data', 'error');
                });
        }

        function loadSitesByCompany(companyId) {
            console.log('loadSitesByCompany called with:', companyId, 'type:', typeof companyId);

            if (!companyId) {
                $('#siteId').empty().append('<option value="">Select Site</option>');
                return;
            }

            const companyIdInt = parseInt(companyId);
            const url = KMSI.Config.buildUrl('/Teacher/GetSitesByCompany?companyId=' + companyIdInt);
            console.log('Making request to:', url);

            $.get(url)
                .done(function(response) {
                    console.log('Sites response:', response);
                    if (response.success) {
                        $('#siteId').empty().append('<option value="">Select Site</option>');
                        $.each(response.sites, function(index, site) {
                            $('#siteId').append($('<option></option>').val(site.siteId).text(site.siteName));
                        });
                    } else {
                        KMSI.showToast('Failed to load sites: ' + (response.message || 'Unknown error'), 'error');
                    }
                })
                .fail(function(xhr, status, error) {
                    console.error('Sites request failed:', xhr, status, error);
                    KMSI.showToast('Failed to load sites', 'error');
                });
        }

        function viewDetails(id) {
            $.get(KMSI.Config.buildUrl('/Teacher/Details/' + id))
                .done(function(response) {
                    if (response.success) {
                        var teacher = response.data;
                        var detailsHtml = `
                            <div class="row">
                                <div class="col-md-6">
                                    <table class="table table-borderless">
                                        <tr><td><strong>Teacher Code:</strong></td><td>${teacher.teacherCode}</td></tr>
                                        <tr><td><strong>Teacher Name:</strong></td><td>${teacher.userName}</td></tr>
                                        <tr><td><strong>Company:</strong></td><td>${teacher.companyName}</td></tr>
                                        <tr><td><strong>Site:</strong></td><td>${teacher.siteName}</td></tr>
                                        <tr><td><strong>Email:</strong></td><td>${teacher.userEmail || 'Not specified'}</td></tr>
                                        <tr><td><strong>Phone:</strong></td><td>${teacher.userPhone || 'Not specified'}</td></tr>
                                    </table>
                                </div>
                                <div class="col-md-6">
                                    <table class="table table-borderless">
                                        <tr><td><strong>Specialization:</strong></td><td>${teacher.specialization || 'Not specified'}</td></tr>
                                        <tr><td><strong>Experience:</strong></td><td>${teacher.experienceYears}</td></tr>
                                        <tr><td><strong>Hourly Rate:</strong></td><td>${teacher.hourlyRateDisplay}</td></tr>
                                        <tr><td><strong>Max Students/Day:</strong></td><td>${teacher.maxStudentsPerDay}</td></tr>
                                        <tr><td><strong>Trial Availability:</strong></td><td>${teacher.trialAvailabilityDisplay}</td></tr>
                                        <tr><td><strong>Status:</strong></td><td><span class="badge bg-${teacher.isActive ? 'success' : 'danger'}">${teacher.statusDisplay}</span></td></tr>
                                    </table>
                                </div>
                            </div>
                        `;
                        $('#detailsContent').html(detailsHtml);
                        $('#detailsModal').modal('show');
                    } else {
                        KMSI.showToast(response.message || 'Failed to load teacher details', 'error');
                    }
                })
                .fail(function() {
                    KMSI.showToast('Failed to load teacher details', 'error');
                });
        }

        function deleteTeacher(id) {
            if (confirm('Are you sure you want to delete this teacher? This action cannot be undone.')) {
                $.ajax({
                    url: KMSI.Config.buildUrl('/Teacher/Delete/' + id),
                    type: 'POST',
                    headers: {
                        'RequestVerificationToken': KMSI.Config.getAntiForgeryToken()
                    },
                    success: function(response) {
                        if (response.success) {
                            KMSI.showToast(response.message, 'success');
                            location.reload();
                        } else {
                            KMSI.showToast(response.message || 'Failed to delete teacher', 'error');
                        }
                    },
                    error: function() {
                        KMSI.showToast('An error occurred while deleting the teacher', 'error');
                    }
                });
            }
        }

        // Initialize on document ready (mengikuti pola Site)
        $(document).ready(function() {
            try {
                KMSI.Teacher.init();
                console.log('Teacher module initialized successfully');
            } catch (error) {
                console.error('Error initializing Teacher module:', error);
                KMSI.showToast('Warning: Some features may not work properly.', 'warning');
            }
        });
    </script>
}