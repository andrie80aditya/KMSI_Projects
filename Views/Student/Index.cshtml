@model IEnumerable<KMSI_Projects.Models.Student>

@{
    ViewData["Title"] = "Master Student";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Anti-forgery token for production -->
@Html.AntiForgeryToken()

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <div class="row align-items-center">
                        <div class="col">
                            <h3 class="card-title mb-0">
                                <i class="fas fa-user-graduate me-2"></i>Student Management
                            </h3>
                        </div>
                        <div class="col-auto">
                            <button type="button" class="btn btn-primary" onclick="openCreateModal()">
                                <i class="fas fa-plus me-2"></i>Add New Student
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover" id="studentTable">
                            <thead class="table-dark">
                                <tr>
                                    <th width="10%">Student Code</th>
                                    <th width="15%">Student Name</th>
                                    <th width="10%">Gender</th>
                                    <th width="10%">Age</th>
                                    <th width="10%">Phone</th>
                                    <th width="10%">Parent Name</th>
                                    <th width="10%">Grade</th>
                                    <th width="10%">Teacher</th>
                                    <th width="10%">Status</th>
                                    <th width="5%">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model)
                                {
                                    <tr>
                                        <td>
                                            <strong>@Html.DisplayFor(modelItem => item.StudentCode)</strong>
                                        </td>
                                        <td>@Html.DisplayFor(modelItem => item.FullName)</td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(item.Gender))
                                            {
                                                <span class="badge bg-info">@(item.Gender == "M" ? "Male" : "Female")</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Not specified</span>
                                            }
                                        </td>
                                        <td>
                                            @if (item.DateOfBirth.HasValue)
                                            {
                                                var today = DateTime.Today;
                                                var age = today.Year - item.DateOfBirth.Value.Year;
                                                if (item.DateOfBirth.Value.Date > today.AddYears(-age)) { age--; }
                                                <span class="text-muted">@age years</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(item.Phone))
                                            {
                                                <span>@item.Phone</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(item.ParentName))
                                            {
                                                <span>@item.ParentName</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                        <td>
                                            @if (item.CurrentGrade != null)
                                            {
                                                <span class="badge bg-primary">@item.CurrentGrade.GradeName</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Not assigned</span>
                                            }
                                        </td>
                                        <td>
                                            @if (item.AssignedTeacher != null)
                                            {
                                                <span>@item.AssignedTeacher.User.FullName</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Not assigned</span>
                                            }
                                        </td>
                                        <td>
                                            @if (item.IsActive)
                                            {
                                                <span class="badge bg-success">@item.Status</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">Inactive</span>
                                            }
                                        </td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <button type="button" class="btn btn-outline-info btn-sm"
                                                        onclick="viewDetails(@item.StudentId)" title="View Details">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                <button type="button" class="btn btn-outline-primary btn-sm"
                                                        onclick="openEditModal(@item.StudentId)" title="Edit Student">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                @if (item.IsActive)
                                                {
                                                    <button type="button" class="btn btn-outline-danger btn-sm"
                                                            onclick="deleteStudent(@item.StudentId)" title="Delete Student">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Modal -->
<div class="modal fade" id="studentModal" tabindex="-1" aria-labelledby="studentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="studentModalLabel">Add New Student</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="studentForm">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <input type="hidden" id="studentId" value="0" />

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="studentCode" class="form-label">Student Code <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="studentCode" name="StudentCode"
                                   placeholder="e.g., STU-001" maxlength="20" required style="text-transform: uppercase">
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="registrationDate" class="form-label">Registration Date <span class="text-danger">*</span></label>
                            <input type="date" class="form-control" id="registrationDate" name="RegistrationDate" required>
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="firstName" class="form-label">First Name <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="firstName" name="FirstName"
                                   placeholder="First Name" maxlength="50" required>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="lastName" class="form-label">Last Name <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="lastName" name="LastName"
                                   placeholder="Last Name" maxlength="50" required>
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="dateOfBirth" class="form-label">Date of Birth</label>
                            <input type="date" class="form-control" id="dateOfBirth" name="DateOfBirth">
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="gender" class="form-label">Gender</label>
                            <select class="form-select" id="gender" name="Gender">
                                <option value="">Select Gender</option>
                                <option value="M">Male</option>
                                <option value="F">Female</option>
                            </select>
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="phone" class="form-label">Phone</label>
                            <input type="tel" class="form-control" id="phone" name="Phone"
                                   placeholder="Phone Number" maxlength="20">
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" name="Email"
                                   placeholder="Email Address" maxlength="100">
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12 mb-3">
                            <label for="address" class="form-label">Address</label>
                            <textarea class="form-control" id="address" name="Address" rows="2"
                                      placeholder="Student's Address" maxlength="500"></textarea>
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="parentName" class="form-label">Parent/Guardian Name</label>
                            <input type="text" class="form-control" id="parentName" name="ParentName"
                                   placeholder="Parent/Guardian Name" maxlength="100">
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="parentPhone" class="form-label">Parent Phone</label>
                            <input type="tel" class="form-control" id="parentPhone" name="ParentPhone"
                                   placeholder="Parent Phone Number" maxlength="20">
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="parentEmail" class="form-label">Parent Email</label>
                            <input type="email" class="form-control" id="parentEmail" name="ParentEmail"
                                   placeholder="Parent Email Address" maxlength="100">
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="status" class="form-label">Status <span class="text-danger">*</span></label>
                            <select class="form-select" id="status" name="Status" required>
                                <option value="Pending">Pending</option>
                                <option value="Active" selected>Active</option>
                                <option value="Trial">Trial</option>
                                <option value="Completed">Completed</option>
                                <option value="Dropped">Dropped</option>
                            </select>
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="companyId" class="form-label">Company <span class="text-danger">*</span></label>
                            <select class="form-select" id="companyId" name="CompanyId" required onchange="loadSitesByCompany(this.value)">
                                <option value="">Select Company</option>
                            </select>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="siteId" class="form-label">Site <span class="text-danger">*</span></label>
                            <select class="form-select" id="siteId" name="SiteId" required>
                                <option value="">Select Site</option>
                            </select>
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="currentGradeId" class="form-label">Current Grade</label>
                            <select class="form-select" id="currentGradeId" name="CurrentGradeId">
                                <option value="">Select Grade</option>
                            </select>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="assignedTeacherId" class="form-label">Assigned Teacher</label>
                            <select class="form-select" id="assignedTeacherId" name="AssignedTeacherId">
                                <option value="">Select Teacher</option>
                            </select>
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12 mb-3">
                            <label for="notes" class="form-label">Notes</label>
                            <textarea class="form-control" id="notes" name="Notes" rows="3"
                                      placeholder="Additional notes about the student" maxlength="1000"></textarea>
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="isActive" name="IsActive" checked>
                                <label class="form-check-label" for="isActive">
                                    Active Status
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="saveButton">
                        <i class="fas fa-save me-2"></i>Save Student
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Details Modal -->
<div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detailsModalLabel">Student Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="detailsContent">
                <!-- Details content will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // ===================================================================
        // PRODUCTION-READY JAVASCRIPT untuk KMSI Student Module
        // ===================================================================

        // Extend existing KMSI object
        KMSI.Student = {
            // Initialize module
            init: function() {
                this.isEditMode = false;
                this.studentTable = null;
                this.bindEvents();
                this.initializeDataTable();
            },

            // Bind event handlers
            bindEvents: function() {
                const self = this;

                // Student code to uppercase
                $(document).on('input', '#studentCode', function() {
                    this.value = this.value.toUpperCase();
                });

                // Form submission
                $(document).on('submit', '#studentForm', function(e) {
                    e.preventDefault();
                    self.submitForm();
                });

                // Modal events
                $('#studentModal').on('hidden.bs.modal', function() {
                    self.resetForm();
                });
            },

            // Initialize DataTable
            initializeDataTable: function() {
                try {
                    if ($.fn.DataTable && $('#studentTable').length) {
                        this.studentTable = KMSI.initDataTable('#studentTable', {
                            order: [[1, 'asc']], // Sort by student name
                            columnDefs: [
                                { targets: [9], orderable: false } // Actions column not sortable
                            ]
                        });
                        console.log('Student DataTable initialized successfully');
                    }
                } catch (error) {
                    console.error('Error initializing DataTable:', error);
                    KMSI.showToast('Error initializing table. Some features may not work properly.', 'error');
                }
            },

            // Reset form
            resetForm: function() {
                $('#studentForm')[0].reset();
                $('#studentId').val(0);
                $('.invalid-feedback').hide();
                $('.form-control').removeClass('is-invalid');
                $('.form-select').removeClass('is-invalid');
                // Set default registration date to today
                $('#registrationDate').val(new Date().toISOString().split('T')[0]);
                // Clear dropdowns
                $('#companyId').empty().append('<option value="">Select Company</option>');
                $('#siteId').empty().append('<option value="">Select Site</option>');
                $('#currentGradeId').empty().append('<option value="">Select Grade</option>');
                $('#assignedTeacherId').empty().append('<option value="">Select Teacher</option>');
            },

            // Submit form
            submitForm: function() {
                try {
                    if (!this.validateForm()) {
                        return;
                    }

                    const formData = {
                        StudentId: parseInt($('#studentId').val()) || 0,
                        CompanyId: parseInt($('#companyId').val()),
                        SiteId: parseInt($('#siteId').val()),
                        StudentCode: $('#studentCode').val(),
                        FirstName: $('#firstName').val(),
                        LastName: $('#lastName').val(),
                        DateOfBirth: $('#dateOfBirth').val() || null,
                        Gender: $('#gender').val() || null,
                        Phone: $('#phone').val() || null,
                        Email: $('#email').val() || null,
                        Address: $('#address').val() || null,
                        ParentName: $('#parentName').val() || null,
                        ParentPhone: $('#parentPhone').val() || null,
                        ParentEmail: $('#parentEmail').val() || null,
                        CurrentGradeId: $('#currentGradeId').val() ? parseInt($('#currentGradeId').val()) : null,
                        AssignedTeacherId: $('#assignedTeacherId').val() ? parseInt($('#assignedTeacherId').val()) : null,
                        Status: $('#status').val(),
                        RegistrationDate: $('#registrationDate').val(),
                        Notes: $('#notes').val() || null,
                        IsActive: $('#isActive').is(':checked')
                    };

                    // Build production-ready URL
                    const url = this.isEditMode ?
                        KMSI.Config.buildUrl('/Student/Edit') :
                        KMSI.Config.buildUrl('/Student/Create');

                    const self = this;

                    // Production-ready AJAX call dengan comprehensive error handling
                    $.ajax({
                        url: url,
                        type: 'POST',
                        data: JSON.stringify(formData),
                        contentType: 'application/json; charset=utf-8',
                        headers: {
                            'RequestVerificationToken': KMSI.Config.getAntiForgeryToken()
                        },
                        timeout: 30000, // 30 seconds
                        beforeSend: function() {
                            $('#saveButton').prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Saving...');
                        },
                        success: function(response) {
                            if (response && response.success) {
                                KMSI.showToast(response.message || 'Student saved successfully!', 'success');
                                $('#studentModal').modal('hide');

                                // Refresh page instead of partial update untuk consistency
                                setTimeout(function() {
                                    window.location.reload();
                                }, 1000);
                            } else {
                                KMSI.showToast(response?.message || 'Failed to save student', 'error');
                                if (response?.errors) {
                                    console.error('Validation errors:', response.errors);
                                }
                            }
                        },
                        error: function(xhr, status, error) {
                            let message = 'An error occurred while saving the student. ';

                            if (status === 'timeout') {
                                message += 'Request timed out.';
                            } else if (xhr.status === 400) {
                                message += 'Invalid data provided.';
                            } else if (xhr.status === 401 || xhr.status === 403) {
                                message += 'You are not authorized to perform this action.';
                            } else if (xhr.status >= 500) {
                                message += 'Server error occurred.';
                            } else {
                                message += 'Please check your connection and try again.';
                            }

                            KMSI.showToast(message, 'error');
                            console.error('Student save error:', xhr, status, error);
                        },
                        complete: function() {
                            $('#saveButton').prop('disabled', false).html('<i class="fas fa-save me-2"></i>Save Student');
                        }
                    });

                } catch (error) {
                    console.error('Error in submitForm:', error);
                    KMSI.showToast('An unexpected error occurred. Please try again.', 'error');
                }
            },

            // Validate form
            validateForm: function() {
                var isValid = true;

                // Clear previous validation
                $('.form-control, .form-select').removeClass('is-invalid');
                $('.invalid-feedback').hide();

                // Required field validation
                var requiredFields = ['studentCode', 'firstName', 'lastName', 'registrationDate', 'status', 'companyId', 'siteId'];

                requiredFields.forEach(function(field) {
                    var element = $('#' + field);
                    if (!element.val()) {
                        element.addClass('is-invalid');
                        element.siblings('.invalid-feedback').text('This field is required').show();
                        isValid = false;
                    }
                });

                // Student code validation
                var studentCode = $('#studentCode').val();
                if (studentCode && !/^[A-Z0-9-]+$/.test(studentCode)) {
                    $('#studentCode').addClass('is-invalid');
                    $('#studentCode').siblings('.invalid-feedback').text('Student code must contain only uppercase letters, numbers, and hyphens').show();
                    isValid = false;
                }

                // Email validation
                var email = $('#email').val();
                if (email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
                    $('#email').addClass('is-invalid');
                    $('#email').siblings('.invalid-feedback').text('Please enter a valid email address').show();
                    isValid = false;
                }

                // Parent email validation
                var parentEmail = $('#parentEmail').val();
                if (parentEmail && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(parentEmail)) {
                    $('#parentEmail').addClass('is-invalid');
                    $('#parentEmail').siblings('.invalid-feedback').text('Please enter a valid email address').show();
                    isValid = false;
                }

                return isValid;
            }
        };

        // Global functions untuk onclick handlers
        function openCreateModal() {
            try {
                KMSI.Student.isEditMode = false;
                $('#studentModalLabel').text('Add New Student');
                KMSI.Student.resetForm();
                loadCreateFormData();
            } catch (error) {
                console.error('Error opening create modal:', error);
                KMSI.showToast('Error opening form. Please try again.', 'error');
            }
        }

        function openEditModal(id) {
            try {
                KMSI.Student.isEditMode = true;
                $('#studentModalLabel').text('Edit Student');
                KMSI.Student.resetForm();
                loadEditFormData(id);
            } catch (error) {
                console.error('Error opening edit modal:', error);
                KMSI.showToast('Error opening edit form. Please try again.', 'error');
            }
        }

        function loadCreateFormData() {
            $.get(KMSI.Config.buildUrl('/Student/GetCreateForm'))
                .done(function(response) {
                    if (response.success) {
                        // Populate companies dropdown
                        $.each(response.companies, function(index, company) {
                            $('#companyId').append($('<option></option>').val(company.companyId).text(company.companyName));
                        });

                        // Populate grades dropdown
                        $.each(response.grades, function(index, grade) {
                            $('#currentGradeId').append($('<option></option>').val(grade.gradeId).text(grade.gradeName));
                        });

                        // Populate teachers dropdown
                        $.each(response.teachers, function(index, teacher) {
                            $('#assignedTeacherId').append($('<option></option>').val(teacher.teacherId).text(teacher.teacherName));
                        });

                        $('#studentModal').modal('show');
                    } else {
                        KMSI.showToast(response.message || 'Failed to load form data', 'error');
                    }
                })
                .fail(function(xhr) {
                    KMSI.showToast('Failed to load form data', 'error');
                });
        }

        function loadEditFormData(id) {
            $.get(KMSI.Config.buildUrl('/Student/GetEditForm/' + id))
                .done(function(response) {
                    if (response.success) {
                        // Populate companies dropdown
                        $.each(response.companies, function(index, company) {
                            $('#companyId').append($('<option></option>').val(company.companyId).text(company.companyName));
                        });

                        // Populate sites dropdown
                        $.each(response.sites, function(index, site) {
                            $('#siteId').append($('<option></option>').val(site.siteId).text(site.siteName));
                        });

                        // Populate grades dropdown
                        $.each(response.grades, function(index, grade) {
                            $('#currentGradeId').append($('<option></option>').val(grade.gradeId).text(grade.gradeName));
                        });

                        // Populate teachers dropdown
                        $.each(response.teachers, function(index, teacher) {
                            $('#assignedTeacherId').append($('<option></option>').val(teacher.teacherId).text(teacher.teacherName));
                        });

                        // Fill form with student data
                        var student = response.student;
                        $('#studentId').val(student.studentId);
                        $('#companyId').val(student.companyId);
                        $('#siteId').val(student.siteId);
                        $('#studentCode').val(student.studentCode);
                        $('#firstName').val(student.firstName);
                        $('#lastName').val(student.lastName);
                        $('#dateOfBirth').val(student.dateOfBirth ? new Date(student.dateOfBirth).toISOString().split('T')[0] : '');
                        $('#gender').val(student.gender || '');
                        $('#phone').val(student.phone || '');
                        $('#email').val(student.email || '');
                        $('#address').val(student.address || '');
                        $('#parentName').val(student.parentName || '');
                        $('#parentPhone').val(student.parentPhone || '');
                        $('#parentEmail').val(student.parentEmail || '');
                        $('#currentGradeId').val(student.currentGradeId || '');
                        $('#assignedTeacherId').val(student.assignedTeacherId || '');
                        $('#status').val(student.status);
                        $('#registrationDate').val(new Date(student.registrationDate).toISOString().split('T')[0]);
                        $('#notes').val(student.notes || '');
                        $('#isActive').prop('checked', student.isActive);

                        $('#studentModal').modal('show');
                    } else {
                        KMSI.showToast(response.message || 'Failed to load student data', 'error');
                    }
                })
                .fail(function() {
                    KMSI.showToast('Failed to load student data', 'error');
                });
        }

        function loadSitesByCompany(companyId) {
            if (!companyId) {
                $('#siteId').empty().append('<option value="">Select Site</option>');
                return;
            }

            const companyIdInt = parseInt(companyId);
            const url = KMSI.Config.buildUrl('/Student/GetSitesByCompany?companyId=' + companyIdInt);

            $.get(url)
                .done(function(response) {
                    if (response.success) {
                        $('#siteId').empty().append('<option value="">Select Site</option>');
                        $.each(response.data, function(index, site) {
                            $('#siteId').append($('<option></option>').val(site.siteId).text(site.siteName));
                        });
                    } else {
                        KMSI.showToast('Failed to load sites: ' + (response.message || 'Unknown error'), 'error');
                    }
                })
                .fail(function(xhr, status, error) {
                    console.error('Sites request failed:', xhr, status, error);
                    KMSI.showToast('Failed to load sites', 'error');
                });
        }

        function viewDetails(id) {
            $.get(KMSI.Config.buildUrl('/Student/Details/' + id))
                .done(function(response) {
                    if (response.success) {
                        var student = response.data;
                        var detailsHtml = `
                            <div class="row">
                                <div class="col-md-6">
                                    <table class="table table-borderless">
                                        <tr><td><strong>Student Code:</strong></td><td>${student.studentCode}</td></tr>
                                        <tr><td><strong>Full Name:</strong></td><td>${student.fullName}</td></tr>
                                        <tr><td><strong>Date of Birth:</strong></td><td>${student.dateOfBirth ? new Date(student.dateOfBirth).toLocaleDateString() : 'Not specified'}</td></tr>
                                        <tr><td><strong>Age:</strong></td><td>${student.age || 'Not specified'}</td></tr>
                                        <tr><td><strong>Gender:</strong></td><td>${student.genderDisplay}</td></tr>
                                        <tr><td><strong>Registration Date:</strong></td><td>${new Date(student.registrationDate).toLocaleDateString()}</td></tr>
                                        <tr><td><strong>Status:</strong></td><td><span class="badge bg-${student.isActive ? 'success' : 'danger'}">${student.status}</span></td></tr>
                                    </table>
                                </div>
                                <div class="col-md-6">
                                    <table class="table table-borderless">
                                        <tr><td><strong>Company:</strong></td><td>${student.companyName}</td></tr>
                                        <tr><td><strong>Site:</strong></td><td>${student.siteName}</td></tr>
                                        <tr><td><strong>Current Grade:</strong></td><td>${student.currentGradeName || 'Not assigned'}</td></tr>
                                        <tr><td><strong>Assigned Teacher:</strong></td><td>${student.assignedTeacherName || 'Not assigned'}</td></tr>
                                        <tr><td><strong>Phone:</strong></td><td>${student.phone || 'Not specified'}</td></tr>
                                        <tr><td><strong>Email:</strong></td><td>${student.email || 'Not specified'}</td></tr>
                                    </table>
                                </div>
                            </div>
                            <div class="row mt-3">
                                <div class="col-md-6">
                                    <h6>Contact Information</h6>
                                    <p>${student.contactInfo || 'No contact information'}</p>
                                </div>
                                <div class="col-md-6">
                                    <h6>Parent/Guardian Information</h6>
                                    <p><strong>Name:</strong> ${student.parentName || 'Not specified'}</p>
                                    <p><strong>Contact:</strong> ${student.parentContactInfo || 'Not specified'}</p>
                                </div>
                            </div>
                            <div class="row mt-3">
                                <div class="col-12">
                                    <h6>Address</h6>
                                    <p>${student.address || 'Not specified'}</p>
                                </div>
                            </div>
                            <div class="row mt-3">
                                <div class="col-12">
                                    <h6>Notes</h6>
                                    <p>${student.notes || 'No notes'}</p>
                                </div>
                            </div>
                        `;
                        $('#detailsContent').html(detailsHtml);
                        $('#detailsModal').modal('show');
                    } else {
                        KMSI.showToast(response.message || 'Failed to load student details', 'error');
                    }
                })
                .fail(function() {
                    KMSI.showToast('Failed to load student details', 'error');
                });
        }

        function deleteStudent(id) {
            if (confirm('Are you sure you want to delete this student? This action cannot be undone.')) {
                $.ajax({
                    url: KMSI.Config.buildUrl('/Student/Delete/' + id),
                    type: 'POST',
                    headers: {
                        'RequestVerificationToken': KMSI.Config.getAntiForgeryToken()
                    },
                    success: function(response) {
                        if (response.success) {
                            KMSI.showToast(response.message, 'success');
                            location.reload();
                        } else {
                            KMSI.showToast(response.message || 'Failed to delete student', 'error');
                        }
                    },
                    error: function() {
                        KMSI.showToast('An error occurred while deleting the student', 'error');
                    }
                });
            }
        }

        // Initialize on document ready
        $(document).ready(function() {
            try {
                KMSI.Student.init();
                console.log('Student module initialized successfully');
            } catch (error) {
                console.error('Error initializing Student module:', error);
                KMSI.showToast('Warning: Some features may not work properly.', 'warning');
            }
        });
    </script>
}